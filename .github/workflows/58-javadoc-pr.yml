# Creates/Resets the gh-pages branch to the intended start state

name: "58-javadoc-pr: Update javadoc for a pr to main"
on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'pom.xml'    
      

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  GH_TOKEN: ${{ github.token }}

permissions:
  contents: write
  pages: write
  id-token: write

jobs: 
  get-pr-num:
    name: Get PR Number
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.get-pr-num.outputs.pr_number }}
      branch_name: ${{ steps.get-branch-name.outputs.branch_name }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
        token: ${{ github.token }}
    - name: Get PR number
      id: get-pr-num
      run: |
         echo "GITHUB_EVENT_PATH=${GITHUB_EVENT_PATH}"
         pr_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
         echo "pr_number=${pr_number}" 
         echo "pr_number=${pr_number}" >> "$GITHUB_OUTPUT"
    - name: Figure out Branch nam
      id: get-branch-name
      run: | 
          GITHUB_HEAD_REF="${GITHUB_HEAD_REF}"
          echo GITHUB_HEAD_REF=${GITHUB_HEAD_REF}
          GITHUB_REF_CLEANED=${GITHUB_REF/refs\/heads\//}
          echo GITHUB_REF_CLEANED=${GITHUB_REF_CLEANED}
          GITHUB_REF_CLEANED=${GITHUB_REF_CLEANED//\//-}
          echo GITHUB_REF_CLEANED=${GITHUB_REF_CLEANED}
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_CLEANED}}"
          echo "branch_name=${BRANCH}"
          echo "branch_name=${BRANCH}" >> "$GITHUB_OUTPUT"

  build-javadoc-for-this-pr:
    name: Javadoc (PR ${{ matrix.value.number }}, Branch ${{ matrix.value.headRefName }})
    runs-on: ubuntu-latest
    needs: [get-pr-num]        

    steps:
    - name: Debugging output
      run: |
        echo "pr_number=${{needs.get-pr-num.outputs.pr_number}}"
        echo "branch_name=${{needs.get-pr-num.outputs.branch_name}}"

    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        ref: ${{ needs.get-pr-num.outputs.branch_name }}
        fetch-depth: 1
        token: ${{ github.token }}

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Build javadoc
      run: mvn -DskipTests javadoc:javadoc
 
    - name: Deploy ðŸš€
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh-pages # The branch the action should deploy to.
        folder: target/site/apidocs # The folder where mvn javadoc:javadoc outputs the javadoc files
        clean: true # Automatically remove deleted files from the deploy branch
        target-folder: prs/${{ needs.get-pr-num.outputs.pr_number }}/javadoc # The folder that we serve our javadoc files from 
  
  build-jekyll-site:
    name: Build Jekyll Site
    needs: [build-javadoc-for-this-pr]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: 'gh-pages'
          fetch-depth: 1
          token: ${{ github.token }}
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1

  deploy-gh-pages:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build-jekyll-site]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

 
